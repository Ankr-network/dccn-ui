"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var auditor_1 = require("./auditor");
var detect_1 = require("./detect");
var detector_1 = require("./detector");
var hidden_1 = require("./hidden");
var identify_1 = require("./identify");
var logger_1 = require("./logger");
var match_1 = require("./match");
var operators_1 = require("./operators");
var plugin_1 = require("./plugin");
var spy_console_1 = require("./spy-console");
var util_1 = require("./util");
var observableSubscribe = rxjs_1.Observable.prototype.subscribe;
var SpyCore = (function () {
    function SpyCore(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        if (SpyCore.spy_) {
            throw new Error("Already spying on Observable.prototype.subscribe.");
        }
        if (options.warning) {
            console.warn("Spying on Observable.prototype.subscribe.");
        }
        SpyCore.spy_ = this;
        rxjs_1.Observable.prototype.subscribe = SpyCore.coreSubscribe_;
        this.auditor_ = new auditor_1.Auditor(options.audit || 0);
        this.defaultLogger_ = options.defaultLogger || logger_1.defaultLogger;
        if (options.defaultPlugins === false) {
            this.plugins_ = [];
        }
        else {
            this.plugins_ = [
                new plugin_1.StackTracePlugin(options),
                new plugin_1.GraphPlugin(options),
                new plugin_1.SnapshotPlugin(this, options),
                new plugin_1.StatsPlugin(this)
            ];
            if (options.devTools !== false) {
                this.plugins_.push(new plugin_1.DevToolsPlugin(this));
            }
        }
        this.pluginsSubject_ = new rxjs_1.BehaviorSubject(this.plugins_);
        this.tick_ = 0;
        this.undos_ = [];
        this.warned_ = {};
        var detector = new detector_1.Detector(this);
        detect_1.hook(function (id) { return _this.detect_(id, detector); });
        if (typeof window !== "undefined") {
            window["rxSpy"] = spy_console_1.wrap(this);
        }
        this.teardown_ = function () {
            if (typeof window !== "undefined") {
                delete window["rxSpy"];
            }
            detect_1.hook(undefined);
            _this.plugins_.forEach(function (plugin) { return plugin.teardown(); });
            _this.plugins_ = [];
            _this.pluginsSubject_.next(_this.plugins_);
            _this.undos_ = [];
            SpyCore.spy_ = undefined;
            rxjs_1.Observable.prototype.subscribe = observableSubscribe;
        };
    }
    Object.defineProperty(SpyCore.prototype, "auditor", {
        get: function () {
            return this.auditor_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpyCore.prototype, "tick", {
        get: function () {
            return this.tick_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpyCore.prototype, "undos", {
        get: function () {
            return this.undos_.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpyCore.prototype, "version", {
        get: function () {
            return "7.0.2";
        },
        enumerable: true,
        configurable: true
    });
    SpyCore.prototype.debug = function (match) {
        var notifications = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            notifications[_i - 1] = arguments[_i];
        }
        if (notifications.length === 0) {
            notifications = ["complete", "error", "next", "subscribe", "unsubscribe"];
        }
        return this.plug(new plugin_1.DebugPlugin(match, notifications));
    };
    SpyCore.prototype.find = function (ctor) {
        var found = this.plugins_.find(function (plugin) { return plugin instanceof ctor; });
        return found ? found : undefined;
    };
    SpyCore.prototype.findAll = function (ctor) {
        return ctor ?
            this.plugins_.filter(function (plugin) { return plugin instanceof ctor; }) :
            this.plugins_;
    };
    SpyCore.prototype.flush = function () {
        this.plugins_.forEach(function (plugin) { return plugin.flush(); });
    };
    SpyCore.prototype.let = function (match, select, options) {
        return this.plug(new plugin_1.LetPlugin(match, select, options));
    };
    SpyCore.prototype.log = function (match, partialLogger) {
        var anyTagged = /.+/;
        if (!match) {
            match = anyTagged;
        }
        else if (typeof match.log === "function") {
            partialLogger = match;
            match = anyTagged;
        }
        return this.plug(new plugin_1.LogPlugin(this, match, partialLogger || this.defaultLogger_));
    };
    SpyCore.prototype.pause = function (match) {
        var pausePlugin = new plugin_1.PausePlugin(match);
        var teardown = this.plug(pausePlugin);
        var deck = pausePlugin.deck;
        deck.teardown = teardown;
        return deck;
    };
    SpyCore.prototype.plug = function () {
        var _this = this;
        var plugins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            plugins[_i] = arguments[_i];
        }
        (_a = this.plugins_).push.apply(_a, plugins);
        this.pluginsSubject_.next(this.plugins_);
        (_b = this.undos_).push.apply(_b, plugins);
        return function () { return _this.unplug.apply(_this, plugins); };
        var _a, _b;
    };
    SpyCore.prototype.show = function (match, partialLogger) {
        var anyTagged = /.+/;
        if (!match) {
            match = anyTagged;
        }
        else if (typeof match.log === "function") {
            partialLogger = match;
            match = anyTagged;
        }
        var snapshotPlugin = this.find(plugin_1.SnapshotPlugin);
        if (!snapshotPlugin) {
            this.warn(console, "Snapshotting is not enabled.");
            return;
        }
        var snapshot = snapshotPlugin.snapshotAll();
        var filtered = Array
            .from(snapshot.observables.values())
            .filter(function (observableSnapshot) { return match_1.matches(observableSnapshot.observable, match); });
        var logger = logger_1.toLogger(partialLogger || this.defaultLogger_);
        var observableGroupMethod = (filtered.length > 3) ? "groupCollapsed" : "group";
        var maxShown = 20;
        var notShown = (filtered.length > maxShown) ? filtered.length - maxShown : 0;
        if (notShown) {
            filtered.splice(maxShown, notShown);
        }
        snapshot.mapStackTraces(filtered).subscribe(function () {
            logger.group(filtered.length + notShown + " snapshot(s) matching " + match_1.toString(match));
            filtered.forEach(function (observableSnapshot) {
                var subscriptions = observableSnapshot.subscriptions;
                logger[observableGroupMethod].call(logger, observableSnapshot.tag ?
                    "Tag = " + observableSnapshot.tag :
                    "Type = " + observableSnapshot.type);
                logger.log("Path =", observableSnapshot.path);
                var subscriberGroupMethod = (subscriptions.size > 3) ? "groupCollapsed" : "group";
                logger.group(subscriptions.size + " subscriber(s)");
                subscriptions.forEach(function (subscriptionSnapshot) {
                    var subscriberSnapshot = snapshot.subscribers.get(subscriptionSnapshot.subscriber);
                    if (subscriberSnapshot) {
                        var values = subscriberSnapshot.values, valuesFlushed = subscriberSnapshot.valuesFlushed;
                        logger[subscriberGroupMethod].call(logger, "Subscriber");
                        logger.log("Value count =", values.length + valuesFlushed);
                        if (values.length > 0) {
                            logger.log("Last value =", values[values.length - 1].value);
                        }
                        logSubscription(subscriptionSnapshot);
                        var otherSubscriptions = Array
                            .from(subscriberSnapshot.subscriptions.values())
                            .filter(function (otherSubscriptionSnapshot) { return otherSubscriptionSnapshot !== subscriptionSnapshot; });
                        otherSubscriptions.forEach(function (otherSubscriptionSnapshot) {
                            logger.groupCollapsed("Other subscription");
                            logSubscription(otherSubscriptionSnapshot);
                            logger.groupEnd();
                        });
                        logger.groupEnd();
                    }
                    else {
                        logger.warn("Cannot find subscriber snapshot");
                    }
                });
                logger.groupEnd();
                logger.groupEnd();
            });
            if (notShown) {
                logger.log("... another " + notShown + " snapshot(s) not shown.");
            }
            logger.groupEnd();
        });
        function logStackTrace(subscriptionSnapshot) {
            var mappedStackTrace = subscriptionSnapshot.mappedStackTrace, rootSink = subscriptionSnapshot.rootSink;
            var mapped = rootSink ? rootSink.mappedStackTrace : mappedStackTrace;
            mapped.subscribe(function (stackTrace) { return logger.log("Root subscribe", stackTrace); });
        }
        function logSubscription(subscriptionSnapshot) {
            var complete = subscriptionSnapshot.complete, error = subscriptionSnapshot.error, unsubscribed = subscriptionSnapshot.unsubscribed;
            logger.log("State =", complete ? "complete" : error ? "error" : "incomplete");
            if (error) {
                logger.error("Error =", error);
            }
            if (unsubscribed) {
                logger.log("Unsubscribed =", true);
            }
            logStackTrace(subscriptionSnapshot);
        }
    };
    SpyCore.prototype.stats = function (partialLogger) {
        var statsPlugin = this.find(plugin_1.StatsPlugin);
        if (!statsPlugin) {
            this.warn(console, "Stats are not enabled.");
            return;
        }
        var stats = statsPlugin.stats;
        var leafSubscribes = stats.leafSubscribes, maxDepth = stats.maxDepth, flattenedSubscribes = stats.flattenedSubscribes, rootSubscribes = stats.rootSubscribes, totalDepth = stats.totalDepth;
        var logger = logger_1.toLogger(partialLogger || this.defaultLogger_);
        logger.group("Stats");
        logger.log("Subscribes =", stats.subscribes);
        if (rootSubscribes > 0) {
            logger.log("Root subscribes =", rootSubscribes);
        }
        if (leafSubscribes > 0) {
            logger.log("Leaf subscribes =", leafSubscribes);
        }
        if (flattenedSubscribes > 0) {
            logger.log("Flattened subscribes =", flattenedSubscribes);
        }
        logger.log("Unsubscribes =", stats.unsubscribes);
        logger.log("Nexts =", stats.nexts);
        logger.log("Errors =", stats.errors);
        logger.log("Completes =", stats.completes);
        if (maxDepth > 0) {
            logger.log("Max. depth =", maxDepth);
            logger.log("Avg. depth =", (totalDepth / leafSubscribes).toFixed(1));
        }
        logger.log("Tick =", stats.tick);
        logger.log("Timespan =", stats.timespan);
        logger.groupEnd();
    };
    SpyCore.prototype.teardown = function () {
        if (this.teardown_) {
            this.teardown_();
            this.teardown_ = undefined;
        }
    };
    SpyCore.prototype.unplug = function () {
        var _this = this;
        var plugins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            plugins[_i] = arguments[_i];
        }
        plugins.forEach(function (plugin) {
            plugin.teardown();
            _this.plugins_ = _this.plugins_.filter(function (p) { return p !== plugin; });
            _this.pluginsSubject_.next(_this.plugins_);
            _this.undos_ = _this.undos_.filter(function (u) { return u !== plugin; });
        });
    };
    SpyCore.prototype.warn = function (logger, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (!this.warned_[message]) {
            (_a = logger_1.toLogger(logger)).warn.apply(_a, [message].concat(args));
            this.warned_[message] = true;
        }
        var _a;
    };
    SpyCore.coreSubscribe_ = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var observable = this;
        var spy_ = SpyCore.spy_;
        if (!spy_) {
            return observableSubscribe.apply(observable, args);
        }
        if (hidden_1.hidden(observable)) {
            SpyCore.spy_ = undefined;
            try {
                return observableSubscribe.apply(observable, args);
            }
            finally {
                SpyCore.spy_ = spy_;
            }
        }
        var notify_ = function (before, block, after) {
            ++spy_.tick_;
            spy_.plugins_.forEach(before);
            block();
            spy_.plugins_.forEach(after);
        };
        var subscriber = util_1.toSubscriber.apply(undefined, args);
        identify_1.identify(observable);
        identify_1.identify(subscriber);
        var ref = {
            observable: observable,
            subscriber: subscriber,
            subscription: undefined,
            timestamp: Date.now(),
            unsubscribed: false
        };
        identify_1.identify(ref);
        var postSelectObserver = {
            complete: function () {
                notify_(function (plugin) { return plugin.beforeComplete(ref); }, function () { return subscriber.complete(); }, function (plugin) { return plugin.afterComplete(ref); });
            },
            error: function (error) {
                if (!(error instanceof Error)) {
                    console.warn("Value passed as error notification is not an Error instance =", error);
                }
                notify_(function (plugin) { return plugin.beforeError(ref, error); }, function () { return subscriber.error(error); }, function (plugin) { return plugin.afterError(ref, error); });
            },
            next: function (value) {
                notify_(function (plugin) { return plugin.beforeNext(ref, value); }, function () { return subscriber.next(value); }, function (plugin) { return plugin.afterNext(ref, value); });
            },
            unsubscribed: false
        };
        var postSelectSubscriber = util_1.toSubscriber(postSelectObserver.next.bind(postSelectObserver), postSelectObserver.error.bind(postSelectObserver), postSelectObserver.complete.bind(postSelectObserver));
        var preSelectObserver = {
            complete: function () {
                this.completed = true;
                if (this.preSelectSubject) {
                    this.preSelectSubject.complete();
                }
                else {
                    this.postSelectSubscriber.complete();
                }
            },
            completed: false,
            error: function (error) {
                this.errored = true;
                if (this.preSelectSubject) {
                    this.preSelectSubject.error(error);
                }
                else {
                    this.postSelectSubscriber.error(error);
                }
            },
            errored: false,
            let: function (plugins) {
                var _this = this;
                var selectors = plugins.map(function (plugin) { return plugin.select(ref); }).filter(Boolean);
                if (selectors.length > 0) {
                    if (!this.preSelectSubject) {
                        this.preSelectSubject = new rxjs_1.Subject();
                    }
                    if (this.postSelectSubscription) {
                        this.postSelectSubscription.unsubscribe();
                    }
                    var source_1 = this.preSelectSubject.asObservable();
                    selectors.forEach(function (selector) { return source_1 = selector(source_1); });
                    this.postSelectSubscription = source_1.pipe(operators_1.hide()).subscribe({
                        complete: function () { return _this.postSelectSubscriber.complete(); },
                        error: function (error) { return _this.postSelectSubscriber.error(error); },
                        next: function (value) { return _this.postSelectSubscriber.next(value); }
                    });
                }
                else if (this.postSelectSubscription) {
                    this.postSelectSubscription.unsubscribe();
                    this.postSelectSubscription = undefined;
                    this.preSelectSubject = undefined;
                }
            },
            next: function (value) {
                if (this.preSelectSubject) {
                    this.preSelectSubject.next(value);
                }
                else {
                    this.postSelectSubscriber.next(value);
                }
            },
            postSelectSubscriber: postSelectSubscriber,
            postSelectSubscription: undefined,
            preSelectSubject: undefined,
            unsubscribed: false
        };
        var preSelectSubscriber = util_1.toSubscriber(preSelectObserver.next.bind(preSelectObserver), preSelectObserver.error.bind(preSelectObserver), preSelectObserver.complete.bind(preSelectObserver));
        var pluginsSubscription = spy_.pluginsSubject_.pipe(operators_1.hide()).subscribe({
            next: function (plugins) { return preSelectObserver.let(plugins); }
        });
        var preSelectUnsubscribe = preSelectSubscriber.unsubscribe;
        preSelectSubscriber.unsubscribe = function () {
            if (!preSelectObserver.unsubscribed) {
                preSelectObserver.unsubscribed = true;
                if (!preSelectObserver.completed && !preSelectObserver.errored) {
                    if (preSelectObserver.postSelectSubscription) {
                        preSelectObserver.postSelectSubscription.unsubscribe();
                        preSelectObserver.postSelectSubscription = undefined;
                    }
                    preSelectObserver.postSelectSubscriber.unsubscribe();
                }
            }
            preSelectUnsubscribe.call(preSelectSubscriber);
        };
        subscriber.add(preSelectSubscriber);
        var postSelectUnsubscribe = postSelectSubscriber.unsubscribe;
        postSelectSubscriber.unsubscribe = function () {
            if (!postSelectObserver.unsubscribed) {
                postSelectObserver.unsubscribed = true;
                notify_(function (plugin) { return plugin.beforeUnsubscribe(ref); }, function () {
                    postSelectUnsubscribe.call(postSelectSubscriber);
                    pluginsSubscription.unsubscribe();
                    ref.unsubscribed = true;
                }, function (plugin) { return plugin.afterUnsubscribe(ref); });
            }
            else {
                postSelectUnsubscribe.call(postSelectSubscriber);
            }
        };
        notify_(function (plugin) { return plugin.beforeSubscribe(ref); }, function () { return ref.subscription = observableSubscribe.call(observable, preSelectSubscriber); }, function (plugin) { return plugin.afterSubscribe(ref); });
        return ref.subscription;
    };
    SpyCore.prototype.detect_ = function (id, detector) {
        var _a = this, auditor_ = _a.auditor_, defaultLogger_ = _a.defaultLogger_;
        auditor_.audit(id, function (ignored) {
            var detected = detector.detect(id);
            var logger = logger_1.toLogger(defaultLogger_);
            if (detected) {
                var audit = (ignored === 0) ? "" : "; ignored " + ignored;
                logger.group("Subscription changes detected; id = '" + id + "'" + audit);
                detected.subscriptions.forEach(function (s) {
                    logSubscription(logger, "Subscription", s);
                });
                detected.unsubscriptions.forEach(function (s) {
                    logSubscription(logger, "Unsubscription", s);
                });
                detected.flatteningSubscriptions.forEach(function (s) {
                    logSubscription(logger, "Flattening subscription", s);
                });
                detected.flatteningUnsubscriptions.forEach(function (s) {
                    logSubscription(logger, "Flattening unsubscription", s);
                });
                logger.groupEnd();
            }
            function logSubscription(logger, name, subscription) {
                logger.group(name);
                logger.log("Root subscribe", subscription.rootSink ?
                    subscription.rootSink.stackTrace :
                    subscription.stackTrace);
                logger.log("Subscribe", subscription.stackTrace);
                logger.groupEnd();
            }
        });
    };
    SpyCore.spy_ = undefined;
    return SpyCore;
}());
exports.SpyCore = SpyCore;
