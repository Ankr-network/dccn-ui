// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dccnk8s.proto

package k8s

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task struct {
	Type                 string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Taskid               int64    `protobuf:"varint,2,opt,name=taskid,proto3" json:"taskid,omitempty"`
	TaskType             string   `protobuf:"bytes,3,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Image                string   `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Replica              int64    `protobuf:"varint,6,opt,name=replica,proto3" json:"replica,omitempty"`
	Extra                string   `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd64e13fd5d79661, []int{0}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Task) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *Task) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Task) GetReplica() int64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *Task) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type K8SMessage struct {
	Type                 string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Taskid               int64    `protobuf:"varint,2,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Taskname             string   `protobuf:"bytes,3,opt,name=taskname,proto3" json:"taskname,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Datacenter           string   `protobuf:"bytes,5,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Report               string   `protobuf:"bytes,7,opt,name=report,proto3" json:"report,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8SMessage) Reset()         { *m = K8SMessage{} }
func (m *K8SMessage) String() string { return proto.CompactTextString(m) }
func (*K8SMessage) ProtoMessage()    {}
func (*K8SMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd64e13fd5d79661, []int{1}
}

func (m *K8SMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SMessage.Unmarshal(m, b)
}
func (m *K8SMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SMessage.Marshal(b, m, deterministic)
}
func (m *K8SMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SMessage.Merge(m, src)
}
func (m *K8SMessage) XXX_Size() int {
	return xxx_messageInfo_K8SMessage.Size(m)
}
func (m *K8SMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SMessage.DiscardUnknown(m)
}

var xxx_messageInfo_K8SMessage proto.InternalMessageInfo

func (m *K8SMessage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *K8SMessage) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *K8SMessage) GetTaskname() string {
	if m != nil {
		return m.Taskname
	}
	return ""
}

func (m *K8SMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *K8SMessage) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *K8SMessage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *K8SMessage) GetReport() string {
	if m != nil {
		return m.Report
	}
	return ""
}

func init() {
	proto.RegisterType((*Task)(nil), "k8s.Task")
	proto.RegisterType((*K8SMessage)(nil), "k8s.K8SMessage")
}

func init() { proto.RegisterFile("dccnk8s.proto", fileDescriptor_cd64e13fd5d79661) }

var fileDescriptor_cd64e13fd5d79661 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x5d, 0x93, 0x6e, 0xcc, 0x80, 0x28, 0x83, 0x94, 0xa5, 0x07, 0x29, 0x39, 0x05, 0x0f,
	0x45, 0x14, 0x21, 0xef, 0x50, 0xbc, 0xc4, 0xbe, 0xc0, 0x9a, 0x0c, 0x12, 0xd2, 0x26, 0x61, 0x77,
	0x0b, 0xfa, 0x46, 0x3e, 0x81, 0xcf, 0x27, 0x33, 0x59, 0xb5, 0x67, 0x6f, 0xff, 0x3f, 0xf9, 0xf3,
	0xf3, 0xed, 0x0c, 0x5c, 0xb6, 0x4d, 0x33, 0xf4, 0x95, 0xdf, 0x4c, 0x6e, 0x0c, 0x23, 0x26, 0x7d,
	0xe5, 0x8b, 0x4f, 0x05, 0xe9, 0xce, 0xfa, 0x1e, 0x11, 0xd2, 0xdd, 0xc7, 0x44, 0x46, 0xad, 0x55,
	0x99, 0xd7, 0xa2, 0x71, 0x09, 0x3a, 0x58, 0xdf, 0x77, 0xad, 0x39, 0x5f, 0xab, 0x32, 0xa9, 0xa3,
	0xc3, 0x15, 0x5c, 0xb0, 0x92, 0x7c, 0x22, 0xf9, 0x5f, 0xcf, 0x3d, 0x83, 0x3d, 0x90, 0x49, 0xe7,
	0x1e, 0xd6, 0x78, 0x03, 0x8b, 0xee, 0x60, 0xdf, 0xc8, 0x2c, 0x64, 0x38, 0x1b, 0x34, 0x90, 0x39,
	0x9a, 0xf6, 0x5d, 0x63, 0x8d, 0x96, 0xfa, 0x1f, 0xcb, 0x79, 0x7a, 0x0f, 0xce, 0x9a, 0x6c, 0xce,
	0x8b, 0x29, 0xbe, 0x14, 0xc0, 0xb6, 0x7a, 0x79, 0x26, 0xef, 0xf9, 0xf7, 0x7f, 0x00, 0x0b, 0xd8,
	0x09, 0xb0, 0xc0, 0x2d, 0x41, 0xfb, 0x60, 0xc3, 0xd1, 0x47, 0xe4, 0xe8, 0xf0, 0x16, 0xa0, 0xb5,
	0xc1, 0x36, 0x34, 0x04, 0x72, 0x91, 0xfc, 0x64, 0x82, 0xd7, 0x90, 0x1c, 0xdd, 0x5e, 0xd0, 0xf3,
	0x9a, 0x25, 0x37, 0x39, 0x9a, 0x46, 0x17, 0x22, 0x77, 0x74, 0x0f, 0x4f, 0x90, 0xc5, 0xcd, 0xe3,
	0x1d, 0xe8, 0x6d, 0x25, 0xfb, 0xbe, 0xda, 0xf0, 0x25, 0xfe, 0xde, 0xb3, 0xca, 0x65, 0xc0, 0xdf,
	0x8a, 0xb3, 0x52, 0xdd, 0xab, 0x57, 0x2d, 0x67, 0x7a, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x84,
	0x50, 0xf2, 0x1a, 0xb7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Dccnk8SClient is the client API for Dccnk8S service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Dccnk8SClient interface {
	K8Task(ctx context.Context, opts ...grpc.CallOption) (Dccnk8S_K8TaskClient, error)
}

type dccnk8SClient struct {
	cc *grpc.ClientConn
}

func NewDccnk8SClient(cc *grpc.ClientConn) Dccnk8SClient {
	return &dccnk8SClient{cc}
}

func (c *dccnk8SClient) K8Task(ctx context.Context, opts ...grpc.CallOption) (Dccnk8S_K8TaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dccnk8S_serviceDesc.Streams[0], "/k8s.dccnk8s/K8Task", opts...)
	if err != nil {
		return nil, err
	}
	x := &dccnk8SK8TaskClient{stream}
	return x, nil
}

type Dccnk8S_K8TaskClient interface {
	Send(*K8SMessage) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type dccnk8SK8TaskClient struct {
	grpc.ClientStream
}

func (x *dccnk8SK8TaskClient) Send(m *K8SMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dccnk8SK8TaskClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Dccnk8SServer is the server API for Dccnk8S service.
type Dccnk8SServer interface {
	K8Task(Dccnk8S_K8TaskServer) error
}

func RegisterDccnk8SServer(s *grpc.Server, srv Dccnk8SServer) {
	s.RegisterService(&_Dccnk8S_serviceDesc, srv)
}

func _Dccnk8S_K8Task_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Dccnk8SServer).K8Task(&dccnk8SK8TaskServer{stream})
}

type Dccnk8S_K8TaskServer interface {
	Send(*Task) error
	Recv() (*K8SMessage, error)
	grpc.ServerStream
}

type dccnk8SK8TaskServer struct {
	grpc.ServerStream
}

func (x *dccnk8SK8TaskServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dccnk8SK8TaskServer) Recv() (*K8SMessage, error) {
	m := new(K8SMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Dccnk8S_serviceDesc = grpc.ServiceDesc{
	ServiceName: "k8s.dccnk8s",
	HandlerType: (*Dccnk8SServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "K8Task",
			Handler:       _Dccnk8S_K8Task_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dccnk8s.proto",
}
